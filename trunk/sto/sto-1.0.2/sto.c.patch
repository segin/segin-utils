--- sto.c.orig	2006-08-04 23:55:46.000000000 -0400
+++ sto.c	2006-08-05 00:09:45.000000000 -0400
@@ -12,14 +12,18 @@
 /* If using Turbo C 2.0 */
 /* #define MSDOS */
 
-#define _GNU_SOURCE || _MINIX
+/* This is required to compile cleanly on a few platforms */
+#define _GNU_SOURCE
 #include <sys/types.h>
 #include <sys/stat.h>
+
 #ifndef MSDOS
 #ifndef DIGITAL_MARS_C
+/* if NOT MS-DOS and NOT windows */
 #include <unistd.h>
 #endif
 #endif
+/* Crappy windows crap */
 #ifdef DIGITAL_MARS_C
 #include <windows.h>
 #endif
@@ -33,8 +37,12 @@
 typedef unsigned int uint32_t;
 typedef unsigned short int uint16_t;
 #endif
+/* Not BCC (Turbo C, intel cc, gcc, lcc, msvc ( i guess) */
 #else
 #ifndef MSDOS
+/* Doesn't exist in Turbo C. Don't need it for Turbo C anyays.
+ * It keeps GCC quiet.
+ */
 #include <stdint.h>
 #endif
 #endif
@@ -48,9 +56,11 @@
 #include <utime.h>
 #endif
 #ifdef MSDOS
+/* We use Turbo C 2.03 for DOS, so it's 16-bit code. */
 typedef unsigned long int uint32_t;
 #endif
 
+/* Opening header */
 typedef struct
 {
 	char magic[4];
@@ -58,6 +68,7 @@
 	uint32_t entries;
 } sto_header;
 
+/* File entry header */
 typedef struct
 {
 	uint32_t fexist;
@@ -72,11 +83,13 @@
 	time_t fctime;
 } sto_fentry;
 
+/* STO_MAGIC is the string that identifies a file as a valid archive */
 #define STO_MAGIC "STO!"
+/* What OS the archive was made on */
 #define OS_UNIX 1
 #define OS_DOS  2 /* I don't see much hope of this ever being used */
 #define OS_WIN  3
-#define OS_DEADBEEF	0xDEADBEEF
+#define OS_DEADBEEF	0xDEADBEEF /* Thanks, Microsoft. */
 
 static struct stat ostat;
 #ifndef MSDOS
@@ -90,6 +103,8 @@
 	exit(1);
 }
 
+/* Windows is very gay, so we need to write a 'fake' sync() function cause
+ * it's too gay to have one. */
 #ifdef __WIN32__
 sync(){}
 #endif
@@ -166,7 +181,8 @@
 	}
 
 	mem = malloc(2);
-
+	/* Make sure the memory that holds the file name is blank,
+	 * otherwise we get a lot of garbage in the archive */
 	bzero(fentry.fname,256);
 
 	/* Die if not enough arguments */
@@ -204,7 +220,16 @@
 				exit(1);
 			}
 			strcpy(header.magic,STO_MAGIC);
+			/* This is the totall possible number of files
+			 * in the archive. A header is created for each
+			 * file specified, and a null header is generated
+			 * if the file is unreadable. Wastes space, I know,
+			 * but it works.
+			 */
 			header.entries = argc - 3;
+			/* 
+			 * Identifies the OS the archive was created on. 
+			 */
 #ifdef MSDOS
 			header.os = OS_DOS;
 #elif __UNIX__
@@ -214,16 +239,23 @@
 #else /* DEADBEEF! */
 			header.os = OS_DEADBEEF;
 #endif /* MSDOS */
+			/* write opening header */
 			fwrite(&header,(sizeof header),1,archive);
+			/* Main archival loop */
 			for(x=0;x<header.entries;x++) {
 				fd = fopen(argv[x+3],"rb");
-				if (fd == NULL) {
-					perror(argv[x+3]);
+				if (fd == NULL) { /* File is unreadable */
+					perror(argv[x+3]); /* bitch about it */
 					fentry.fexist = 0;
 					fentry.flen = 0;
 					fentry.fname[0] = '\0';
 					fstatus = fwrite(&fentry,sizeof(sto_fentry),1,archive);
-					if (fstatus != sizeof(sto_fentry)) {
+					/* We were unable to write the entire 
+					 * header, which means our archive file
+					 * is invalid or unwritable. Bitch 
+					 * about it and die. 
+					 */
+				if (fstatus != sizeof(sto_fentry)) {
 						perror(argv[2]);
 						free(mem);
 						exit(1);
@@ -256,10 +288,24 @@
 #endif /* MSDOS */
 					strcat(fentry.fname,basename(argv[x+3]));
 					fstatus = fwrite(&fentry,sizeof(sto_fentry),1,archive);
+					/* We were unable to write the entire 
+					 * header, which means our archive file
+					 * is invalid or unwritable. Bitch 
+					 * about it and die. 
+					 */
+					if (fstatus != sizeof(sto_fentry)) {
+						perror(argv[2]);
+						free(mem);
+						exit(1);
+					}
+					/* File copy loop -- ignores errors */
 					while (fread(mem,1,1,fd))
 						fwrite(mem,1,1,archive);
 
 				}
+				/* Clean out the garbage, close the archive,
+				 * and flush the OS's write buffers
+				 */
 				bzero(fentry.fname,256);
 				fclose(fd);
 				sync();
@@ -279,18 +325,23 @@
 			} else {
 				archive = fopen(argv[2],"rb");
 			}
-
+			
+			/* Archive doesn't exist or is unreadable */
 			if (archive == NULL) {
 				perror(argv[2]);
 				free(mem);
 				exit(1);
 			}
 			fread(&header,sizeof(sto_header),1,archive);
+			/* Check the header. If it contains junk
+			 * data (i.e. not "STO!"), bitch and die.
+			 */
 			if (strncmp(header.magic,STO_MAGIC,4) != 0) {
 				puts("Bad archive!");
 				free(mem);
 				exit(1);
 			}
+			/* Extraction loop */
 			for(x=0;x<header.entries;x++) {
 				fread(&fentry,sizeof(sto_fentry),1,archive);
 				if (fentry.fexist == 0)
