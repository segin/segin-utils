red me

this is about C version of matpic, lua file is older test implementation
to build, either copy Makefile.watcom to Makefile and run "wmake" if you are using openwatcom
or on linux/unix copy or link Makefile.nix to Makefile and run "make"
currently only 14bit and 18f series PIC chips are supported
synopsis
	matpic [-d|p|P|t] [-r] [<infile> [<outfile>]]
options
	-d	disassemble
	-p	only preprocess
	-P	don't preprocess -- ignored if -d is specified
	-t	after assembling instead of giving ihex output, disassemble again
	-r	format disassembly listing in such way it can be re-assembled without modification
			the default is nicer to read but cannot simply be assembled as it list adress and opcode with each line
			without -d or -t this option is ignored
	-a <pic14b|pic18f>	select target architecture
when no files specified input file is read from stdin, output written to stdout
comments can be started with ";", they end together with the line
multiline or part-of line comments can be started with "/*" and ended with "*/", they can also be nested
or u c be creative and use "if 0" & "endif"
if there is a backslash ("\") before a newline, the newline will be ignored
+ - * / % & | ^ << >> ~ ! == != > < >= <= () behave as in C,
 except that &, ^ and | have higher precedence than the comparison operators (<, >, <=, >=, ==, !=)
$ is the address at start of line
expressions between square braclets (i.e. [1+2]) are evaluated in the preprocessor
identifiers can be described by regex as /[a-zA-Z_][a-zA-Z0-9]*/
lines are divided as follows:
	[<label>] [<instruction> [<argument>, <...>]]
if an identifier is neither a directive or instruction and present before any whitespace, it's considered a label
if an identifier is followed by a (and before any instruction/directive) ':' it's considered a label
if a label starts with a '.' it's considered a local label (it can also be given a : at the end)
more dots before a local label make it local to a local label and so on
you can call a local label out of its scope like label.locallabel
following directives exist:
	org <origin>: set origin
	data <value>, ...: put stray words into bytecode (native word size)
	db|dw|dd <value>, ...: add data of 2, 4 byte size respectively into bytecode output
	                    when number is bigger than the native word size, big endian is assumed
		for data/db/dw/dd if you place strings like this "Hello, World!" they stored as string of bytes
		and if they are not divisible by the data size of the directive used 0 padding is appened
		if necessary, at the end of any data directive 0 padding is added to align whatever comes next
	equ <number>: assign <number> to the preceding label, instead of the adress it's at
	radix <radix>: set the default radix, valid values are "bin", "oct", "dec", "hex"
		this directive also affects the preprocessor
		with hex radix one should make sure the first digit of a number is 0-9
		octal 0 will be disabled so you can precede things with 0
also the following which are only meant for the preprocessor to tell the assembler what's going on
	file "<filename>": tell assembler what file it is working on (also sets next line # to 1)
	endfile: tell the assembler we are working on the previous file again
	line <line #>: tell assembler what the next line is numbered
	expands <id>, "<filename>", <line>: tell the macro following code is from a specific macro
	endexp: tell the assembler we exited a macro
also there is preprocessor directives:
	define, if, ifdef, ifndef, else, endif: behave mostly like C
		with exception of the use of arguments in macros, in a case like
			define macro(a, b) (a + b)
		passing extra arguments after b, will add those to b, including commas
		define name can be put in <> bracelets to make it be preprocessed
	xdefine, undef and rep do what they does in nasm, with rep you get '@@' to tell you what iteration is current (and endrep ends the block)
	msg "<message>": show a message
	warning "<message>": show a threatning message
	error "<message>": show a deadly message
	they don't need # like in C (though it is allowed, you even can use % like in nasm)
special case of preprocessor is multiline macro, synopsis:
	macro <identifier> [<argument name>, <...>]
they are ended with:
	endm
and also can put the name in diamond bracelets '<' and '>' to make it preprocessed
nesting of multiline macros r supported
in multiline macros '@0' denotes the number of arguments excluding named ones
@1 @2 etc are the actual arguments
expressions can be used to select the argument if you place it in bracelets like '@(<expression>)'
also those expressions can be preprocessed if you use [] bracelets
macro arguments won't be expanded in macros expanded inside the macro
the preprocessor will remove any instance of the ## digraph, so you can concatenate signle line macros to form a single word
integer notation supports the following prefixes:
	none at all: decimal
	0d, 0t: decimal
	$, 0x, 0h: hexadecimal
	0b, 0y: binary
	0o, 0q: octal
	0: octal
and the following suffixes:
	d, t: decimal
	x, h: hex
	b, y: binary
	o, q: octal
b and d suffix and octal 0, 0b and 0d suffix are ignored if the default radix is hex
underscores within integers are ignored (but not in prefix plz)
when integers are expected, you can also give a string encapsulated in quotes or double quotes
   "abcd" is equivalent to 0x61626364
if using x or h suffix, one should make sure the first digit is 0-9
utf-8 in labels / macro names etc are allowed
for 14bit PIC if no W or F is given to *wf instructions, F is assumed
in the 18f series instruction set TBLRD*, TBLRD*+, TBLRD*-, TBLRD+* and similar TBLWT instructions have been suffixed i, d and p for post-increment, post-decrement and pre-increment respectively, instead of "*+" etc
instructions expecting a relative adress should be given an absolute adress, the assembler will substract the offset

BUGS
	unicode will be case sensitive
