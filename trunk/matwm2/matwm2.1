.TH matwm2 1 "October 7, 2009" "" ""
.SH NAME
matwm2 \- Window manager for X11
.SH SYNOPSIS
.B matwm2 [ \-display
.I display
.B ] [ \-defaults ]
.SH DESCRIPTION
.B matwm2
is a simple window manager for X11. It features window frames with titlebar and buttons, configurable key bindings and mouse buttons, support for EWMH and motif hints, focus-follows-mouse and click-to-focus focus models and virtual desktops.
.PP
Window borders have 4 buttons, wich do the same as the following key actions explained below (from left to right): "iconify", "expand", "maximise" and "close". To exit matwm send it SIGINT signal. At exit matwm will place the windows back on the root window in stacking order, iconic windows on the bottom, above that the windows from all inactive desktops in reverse order and then above those the windows from the current desktop and sticky windows shown on it. When a focussed window dissapears the window that was focussed before will be focused (unless the "click_focus" option is set to "false" and the cursor is above another window due to the window dissapearing), and if no previous window is there (if it has dissapeared for example) then the topmost window will be focused.
.PP
Further, explanition of the various options in the configuration file(s) below combined with the default configuration, schould give you an idea of how to use matwm2. Just keep in mind there is no default built-in way of launching applications exept the ctrl-mod1-return key binding, wich spawns an xterm.
.SH OPTIONS
.IP -display display
Specify the X display to use.
.IP -defaults
Print built-in default configuration to stdout.
.SH FILES
.IP /etc/matwmrc
System wide configuration file.
.IP $HOME/.matwmrc
Per user configuration file.
.PP
Both of these config files share the same format, and can be considered a list of "commands" that may or may not have arguments, separated by spaces. The commands themselves are separated by newlines. If matwm2 encounters a '#' character in one of these files, the rest of the line is ignored.
.PP
Following is a list of possible commands for matwm configuration files and their explanation. Valid modifier keys are "shift", "lock", "control" and "mod1" to "mod5" (see: output of xmodmap).
.IP "background [X11 color name]"
Sets the background color of window frames when they are focussed.
.IP "inactive_background [X11 color name]"
Sets the background color of window frames when they are not focussed.
.IP "foreground [X11 color name]"
Sets the foreground (text, border) color of window frames when they are focussed.
.IP "inactive_foreground [X11 color name]"
Sets the foreground (text, border) color of window frames when they are not focussed.
.IP "font [X11 font name]"
Sets the font used for drawing text.
.IP "button[1-5] [button action]"
Sets the function mouse buttons have on window borders. Possible button actions are "move", "resize", "raise", "lower" and "none". "move" and "resize" raise the window and let the user drag it to resize or move it while the mouse button is held down. Moving windows over the right or left screen edge can be used to move them to the next desktop (at the right) or previous desktop (at the left). The "raise" and "lower" action send the window to the top or bottom of the stack respectively.
.IP "border_width [integer]"
Sets the width of window borders to [integer] pixels.
.IP "snap [integer]"
Snap windows together or to screen edges when they are [integer] pixels away from eachother, set to 0 to disable snapping.
.IP "desktops [integer]"
Sets the amount of virtual desktops.
.IP "exec [command]"
Invokes "sh -c [command]".
.IP "ignore_modifier [modifier key] [...]
Ignore the state of specified modifier key(s).
.IP "mouse_modifier [modifier key] [...]"
If specified modifier key(s) are down, user can use the same button actions as set for the window frame in the client window itself.
.IP "no_snap_modifier [modifier key] [...]"
If specified modifier key(s) are down while dragging a window (either to move or resize it) windows will not snap to eachother or window edges.
.IP "click_focus [boolean]"
Sets the focus model, if set to "true" matwm2 will focus windows when they are clicked. If set to "false" windows will be focussed when the mouse cursor moves over them. If it is false and the window under the mouse somehow hasn't got focus anymore, and windows that have EWMH hints set to specify they are a desktop will always be focussed only when clicked.
.IP "click_raise [boolean]"
If set to "true" windows will be risen when they (meaning the window itself, not its frame) are clicked, if set to "false" this behavior is disabled.
.IP "focus_new [boolean]"
If set to "true" new windows will be focussed when they appear and accordingly a value of "false" disables this behaviour.
.IP "taskbar_ontop"
If set to "true" taskbar windows that use EWMH hints will be kept ontop, if set to "false" windows can cover them.
.IP "resetkeys"
Remove all previously defined key bindings from memory.
.IP "key [modifier key] [...] [X11 key name] [key action]"
Binds the specified modifier and key combination to [key action]. Key names are obtained from <X11/keysymdef.h> by removing the XK_ prefix from each name.
.PP
Following is a list of possible key actions and their explanation.
.IP "exec [command]"
Invokes "sh -c [command]".
.IP "next"
Focus the next window in the stacking. Pressing a key bound to this or the "prev" action will show you a list with all currently visible and iconic windows, wich will dissapear when all modifiers of either key action are released. Afterwards the window selected will be raised. If it is off screen it will be brought back on screen, also the mouse will be warped to the bottom right corner of the window. Between the last normal window and the first iconic window there will be slightly more spacing, to clarify what windows are iconic. Items in this list can also be focussed with the mouse in the same way as windows.
.IP "prev"
Focus the previous window in the stacking.
.IP "iconify"
Iconify the current window (window will dissapear, but can be found in either a taskbar that complies with the EWMH specification, or the window list that apears if one of the two functions above is called). Iconified windows will be placed at the very bottom of the stack (so for icons top to bottom order in the window list complies with first to last window iconified).
.IP "maximise [direction][...]"
Maximise the current window, or revert a maximised window to its previous state. The optional argument [direction] can be h, v, l, r, d or u (respectively horizontal, vertical, left, right, up and down), or a combination of those to specify the action is to be comitted only in the specified direction(s).
.IP "expand [direction][...]"
This function serves to grow a window in size as much as is possible without overlapping any more windows then are currently already overlapped by it. The [direction] argument does exactly what is does for the maximise key action.
.IP "fullscreen"
Make the current window apear fullscreen, or revert a fullscreen window to its previous state.
.IP "close"
Send a WM_DELETE_WINDOW the current window if the window supports it, else destroy it with XKillClient().
.IP "sticky"
Make the current window sticky (appear on all desktops), or reverses this.
.IP "ontop"
Toggle always-on-top mode for the current window.
.IP "below"
Toggle stay-below mode for the current window.
.IP "title"
Toggle display of title bar for the current window.
.IP "iconify_all"
Iconify all windows. If no iconic windows are restored after the last call to this function, the next call to it will restore the windows iconified with it. If your taskbar uses EWMH and has a "show desktop" button, it can also be used to do this.
.IP "next_desktop"
Go to the next virtual desktop.
.IP "prev_desktop"
Go to the previous virtual desktop.
.IP "to_border [border][...]"
Move the current window to a border or corner of the screen, argument is one or more of l, r, t and b (left, right, top and bottom respectively).
.IP "raise"
Raise the current window to the top of the stack.
.IP "lower"
Lower the current window to the bottom of the stack.
.SH AUTHOR
Mattis Michel <sic_zer0@hotmail.com>
.SH SEE ALSO
.BR XQueryColor(3),
.BR XStringToKeysym(3),
.BR xmodmap(1)

