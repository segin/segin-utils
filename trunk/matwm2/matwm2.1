.TH matwm2 1 "September 20, 2009" "" ""
.SH NAME
matwm2 \- Window manager for X11
.SH SYNOPSIS
.B matwm2 [ \-display
.I display
.B ] [ \-defaults ]
.SH DESCRIPTION
.B matwm2
is a simple window manager for X11. It features window frames with titlebar and buttons, configurable key bindings and mouse buttons, support for EWMH and motif hints.
.PP
Explanition of the various options in the configuration file(s) below combined with the default configuration, schould give you an idea of how to use matwm2. Further just keep in mind there is no default built-in way of launching applications exept the ctrl-mod1-return key binding, wich spawns an xterm. Window borders have 4 buttons, wich do the same as the following key actions explained below (from left to right): "iconify", "expand", "maximise" and "close". Windows can be focussed by moving the mouse cursor over them.
.SH OPTIONS
.IP -display display
Specify the X display to use.
.IP -defaults
Print built-in default configuration to stdout.
.SH FILES
.IP /etc/matwmrc
System wide configuration file.
.IP ~/.matwmrc
Per user configuration file.
.PP
Both of these config files share the same format, and can be considered a list of "commands" that may or may not have arguments, separated by spaces. The commands themselves are separated by newlines.
.PP
Following is a list of possible commands for matwm configuration files and their explanation. Valid modifier keys are "shift", "lock", "control" and "mod1" to "mod5" (see: output of xmodmap).
.IP "background [X11 color name]"
Sets the background color of window frames when they are focussed.
.IP "inactive_background [X11 color name]"
Sets the background color of window frames when they are not focussed.
.IP "foreground [X11 color name]"
Sets the foreground (text, border) color of window frames when they are focussed.
.IP "inactive_foreground [X11 color name]"
Sets the foreground (text, border) color of window frames when they are not focussed.
.IP "font [X11 font name]"
Sets the font used for drawing text.
.IP "button[1-5] [button action]"
Sets the function mouse buttons have on window borders. Possible button actions are "move", "resize", "raise", "lower" and "none". "move" and "resize" raise the window and let the user drag it to resize or move it while the mouse button is held down.
.IP "border_width [integer]"
Sets the width of window borders to [integer] pixels.
.IP "snap [integer]"
Snap windows together when they are [integer] pixels away from eachother, set to 0 to disable snapping.
.IP "desktops [integer]"
Sets the amount of virtual desktops.
.IP "exec [command]"
Invokes "sh -c [command]".
.IP "ignore_modifier [modifier key] [...]
Ignore the state of specified modifier key(s).
.IP "mouse_modifier [modifier key] [...]"
If specified modifier key(s) are down, user can use the same button actions as set for the window frame in the client window itself.
.IP "resetkeys"
Remove all previously defined key bindings from memory.
.IP "key [modifier key] [...] [X11 key name] [key action]"
Binds the specified modifier and key combination to [key action]. Key names are obtained from <X11/keysymdef.h> by removing the XK_ prefix from each name.
.PP
Following is a list of possible key actions and their explanation.
.IP "exec [command]"
Invokes "sh -c [command]".
.IP "next"
Focus and raise the next window in the stacking.
.IP "prev"
Focus and raise the previous window in the stacking.
.IP "iconify"
Iconify the current window (window will dissapear, but can be found in either a taskbar that complies with the EWMH specification or the window list that apears if one of the two functions above is called).
.IP "maximise [direction][...]"
Maximise the current window, or revert a maximised window to its previous state. The optional argument [direction] can be h, v, l, r, d or u (respectively horizontal, vertical, left, right, up and down), or a combination of those to specify the action is to be comitted only in the specified direction(s).
.IP "expand [direction][...]"
This function serves to grow a window in size as much as is possible without overlapping any more windows then are currently already overlapped by it. The [direction] argument does exactly what is does for the maximise key action.
.IP "fullscreen"
Make the current window apear fullscreen, or revert a fullscreen window to its previous state.
.IP "close"
Send a WM_DELETE_WINDOW the current window if the window supports it, else destroy it with XKillClient().
.IP "sticky"
Make the current window sticky (appear on all desktops), or reverses this.
.IP "ontop"
Toggle always-on-top mode for the current window.
.IP "below"
Toggle stay-below mode for the current window.
.IP "title"
Toggle display of title bar for the current window.
.IP "iconify_all"
Iconify all window.
.IP "next_desktop"
Go to the next virtual desktop.
.IP "prev_desktop"
Go to the previous virtual desktop.
.IP "to_border [border][...]"
Moves the current window to a border or corner of the screen, argument is one or more of l, r, t and b (left, right, top and bottom respectively).
.SH AUTHOR
Mattis Michel <sic_zer0@hotmail.com>
.SH SEE ALSO
.BR XQueryColor(3),
.BR XStringToKeysym(3),
.BR xmodmap(1)

